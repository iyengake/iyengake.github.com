<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Keerthi Iyengar</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://iyengake.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="http://iyengake.github.io" />
<updated>2015-01-02T09:15:58-05:00</updated>
<id>http://iyengake.github.io/</id>
<author>
  <name>Keerthi Iyengar</name>
  <uri>http://iyengake.github.io/</uri>
  <email>keerthi.r.iyengar@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Notes on Erlang QuickCheck - Part 2]]></title>
  <link>http://iyengake.github.io/erlang/notes-on-erlang-quickcheck-part-2</link>
  <id>http://iyengake.github.io/erlang/notes-on-erlang-quickcheck-part-2</id>
  <updated>2014-12-04T00:00:00-00:00</updated>
  <published>2014-12-04T00:00:00-05:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Yesterday I had the pleasure of spending
a few extra hours with
&lt;a href=&quot;http://www.cse.chalmers.se/~rjmh/&quot;&gt;John Hughes&lt;/a&gt;.
As usual, it has been an impressive learning experience, so I decided - &lt;a href=&quot;http://roberto-aloi.com/erlang/notes-on-erlang-quickcheck/&quot;&gt;once
again&lt;/a&gt; -
to share some of the highlights from our discussions.&lt;/p&gt;

&lt;p&gt;We modeled one of our internal Erlang applications, using a Quickcheck
&lt;em&gt;statem&lt;/em&gt;. The application was relatively small
(i.e. &amp;lt;1000 LOC), it offered a pretty straightforward API and its code
was already covered by a fair amount of unit tests, with code coverage
surpassing 90%.&lt;/p&gt;

&lt;p&gt;As already happened to
&lt;a href=&quot;http://basho.com/quickchecking-poolboy-for-fun-and-profit/&quot;&gt;someone else&lt;/a&gt;,
I didn’t expect to find too many bugs, if not in the Quickcheck model
itself.
Once again, Quickcheck proved me to be very wrong, finding five or six
corner cases which caused the tests
to fail. It also revealed some interesting behaviour for the
application which, even if ineherently correct, was not clearly documented.&lt;/p&gt;

&lt;p&gt;It took me a couple of days to get familiar with the
application and its API, to implement a decent model for it and to
wrap up everything into a pull request and into these notes.&lt;/p&gt;

&lt;p&gt;So, let’s start go through a couple of learnt lessons.&lt;/p&gt;

&lt;h3 id=&quot;is-zero-a-natural-number&quot;&gt;Is ‘zero’ a natural number?&lt;/h3&gt;

&lt;p&gt;There is no universal agreement about whether to include zero in the
set of &lt;a href=&quot;http://en.wikipedia.org/wiki/Natural_number&quot;&gt;natural numbers&lt;/a&gt;.
In Erlang QuickCheck, zero is considered a natural number, so it &lt;strong&gt;can&lt;/strong&gt;
be generated by the &lt;code&gt;eqc_gen:nat/0&lt;/code&gt; generator. In fact, a &lt;code&gt;nat()&lt;/code&gt; normally
shrinks to &lt;code&gt;0&lt;/code&gt;. This is easily verifiable by means of the
&lt;code&gt;eqc_gen:sampleshrink/1&lt;/code&gt; function which, given a generator &lt;code&gt;G&lt;/code&gt;,
prints a value generated by &lt;code&gt;G&lt;/code&gt;, followed by &lt;strong&gt;one way&lt;/strong&gt; of shrinking
it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; eqc_gen:sampleshrink(eqc_gen:nat()).
3
--&amp;gt; [0,2]
ok
&amp;gt; eqc_gen:sampleshrink(eqc_gen:nat()).
8
--&amp;gt; [0,2,6,7]
ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to exclude the zero from the possible outcomes, you can
define something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;non_zero_nat() -&amp;gt;
    ?SUCHTHAT(N, eqc_gen:nat(), N &amp;gt; 0).
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;code-coverage-for-erlang-quickcheck&quot;&gt;Code coverage for Erlang Quickcheck&lt;/h3&gt;

&lt;p&gt;Quickcheck does not provide code coverage information out of the box,
so you need to use an external coverage analysis tool such as
&lt;a href=&quot;http://www.erlang.org/doc/man/cover.html&quot;&gt;cover&lt;/a&gt; to obtain that
piece of information.&lt;/p&gt;

&lt;p&gt;If you use the &lt;a href=&quot;https://github.com/rebar/rebar&quot;&gt;rebar&lt;/a&gt; build
tool to compile and test your Erlang applications, there is an easy
solution to the problem. In fact, even if
&lt;a href=&quot;https://github.com/rebar/rebar/wiki/Getting-started#checking-code-coverage-statistics&quot;&gt;rebar’s cover support&lt;/a&gt;
is currently limited to the EUnit testing framework, that is going to
be enough in most of the cases. The trick is to  wrap your Quickcheck
properties into
&lt;a href=&quot;http://www.erlang.org/doc/apps/eunit/chapter.html&quot;&gt;EUnit&lt;/a&gt; test suites.&lt;/p&gt;

&lt;p&gt;Simply add the EUnit header file &lt;strong&gt;after&lt;/strong&gt; the Quickcheck one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-include_lib(&quot;eqc/include/eqc.hrl&quot;).
...
-include_lib(&quot;eunit/include/eunit.hrl&quot;).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And wrap each Quickcheck property into a EUnit test case. The result
should look something like this, where the timeout is
expressed in seconds:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;prop_sample_test_() -&amp;gt;
  { &quot;prop_sample&quot;, {timeout, 10, ?_assert(eqc:quickcheck(?MODULE:prop_sample()))}}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it. You can now verify your Quickcheck properties via Eunit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./rebar skip_deps=true eunit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And get your coverage reports in &lt;code&gt;.eunit/index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;generic-servers-the-application-controller-and-the-terminate1-function&quot;&gt;Generic servers, the application controller and the &lt;code&gt;terminate/1&lt;/code&gt; function&lt;/h3&gt;

&lt;p&gt;One of the most interesting issues which emerged while implementing
our Quickcheck &lt;em&gt;statem&lt;/em&gt; model was related to the
&lt;a href=&quot;http://www.erlang.org/doc/man/gen_server.html#Module:terminate-2&quot;&gt;semantics&lt;/a&gt;
of the &lt;code&gt;terminate/1&lt;/code&gt; callback function for the
&lt;a href=&quot;http://www.erlang.org/doc/man/gen_server.html&quot;&gt;&lt;code&gt;gen_server&lt;/code&gt;&lt;/a&gt; OTP
behaviour.&lt;/p&gt;

&lt;p&gt;In fact, while adding commands to our &lt;em&gt;statem&lt;/em&gt;, we noticed a rarely
occurring issue. I say “rarely” since it only
appeared after increasing the number of generated test cases from
the &lt;em&gt;100&lt;/em&gt; (default value) to &lt;em&gt;1000&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eqc:quickcheck(eqc:numtests(1000, sample_eqc:sample_prop())).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The issue seemed to happen on an application &lt;em&gt;restart&lt;/em&gt; (i.e. a &lt;code&gt;stop&lt;/code&gt;
command immediately followed by a &lt;code&gt;start&lt;/code&gt; command). Both commands were
using the
&lt;a href=&quot;http://www.erlang.org/doc/man/application.html&quot;&gt;&lt;code&gt;application&lt;/code&gt;&lt;/a&gt; module
to start and stop the Erlang application.
Some basic tracing revealed that the
application was not cleaning up things properly upon termination. The
guilty process seemed to be a &lt;code&gt;gen_server&lt;/code&gt;. We immediately noticed
that the process was not trapping exits, which prevented the
&lt;code&gt;terminate/1&lt;/code&gt; from executing. So far,
nothing too interesting. We enabled the &lt;code&gt;trap_exit&lt;/code&gt; flag for the
&lt;code&gt;gen_server&lt;/code&gt; and we re-run the tests.&lt;/p&gt;

&lt;p&gt;At this point the tests passed, but they were taking very long time,
which was a bit
surprising. The &lt;code&gt;terminate/2&lt;/code&gt; function, containing the cleanup
code, seemed harmless at a first glance. Nonethless, the &lt;code&gt;gen_server&lt;/code&gt;
process was hanging somewhere, so that the supervisor had to kill
it after the
configured &lt;code&gt;shutdown&lt;/code&gt; time, which was set to &lt;em&gt;5&lt;/em&gt; seconds.&lt;/p&gt;

&lt;p&gt;A second look at the cleanup function pointed to a suspicious
&lt;code&gt;application:set_env/3&lt;/code&gt; call. The server was trying to set an
application environment variable before dying. A rapid exploration of
the OTP for the
&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-17.3.4/lib/kernel/src/application_controller.erl#L464&quot;&gt;application_controller&lt;/a&gt;
module revealed the mystery.&lt;/p&gt;

&lt;p&gt;In OTP, the application environment is handled via a ETS table, which
is accessed via the &lt;code&gt;application_controller&lt;/code&gt; process. Whilst reading
an environment variable is implemented as a mere lookup operation, &lt;strong&gt;writes
are serialized through the application controller&lt;/strong&gt;. In other words,
&lt;strong&gt;it is not possible to set an environment variable from a
&lt;code&gt;terminate/1&lt;/code&gt; callback function in a gen_server which traps exits&lt;/strong&gt;,
since in case of application termination the application controller is
busy shutting down the application itself and cannot handle other
requests, causing a deadlock. A minimal example showing the &lt;em&gt;deadlock&lt;/em&gt;
can be found in the following
&lt;a href=&quot;https://gist.github.com/robertoaloi/249c6bb9e607fb53d8b6&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even if the &lt;code&gt;terminate/1&lt;/code&gt; was covered by unit tests, the issue never
emerged since in that case the &lt;code&gt;terminate&lt;/code&gt; function was not called via
the application controller, but as the consequence of a normal exit signal.&lt;/p&gt;

&lt;p&gt;Yet another example of a buggy function 100% covered by unit tests has
been found. Praises to Quickcheck!&lt;/p&gt;

&lt;h3 id=&quot;show-states&quot;&gt;Show states&lt;/h3&gt;

&lt;p&gt;When implementing the model for a Quickcheck &lt;em&gt;statem&lt;/em&gt;, you often end up
with counter-examples which are a direct consequence of bugs in your
properties, missing preconditions and postconditions or incorrect
state updates. In such cases, it’s a good idea to include model states
into the standard Quickcheck output. You can customize Quickcheck
pretty-printing by using &lt;code&gt;eqc_gen:with_parameters/3&lt;/code&gt; and enabling the
&lt;code&gt;show_states&lt;/code&gt; flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;prop_sample() -&amp;gt;
  ?FORALL(Cmds, commands(?MODULE),
  begin
    {H, S, Res} = run_commands(?MODULE, Cmds),
    with_parameters(
      [{show_states, true}],
      pretty_commands(
        ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, you can display the model states by using the
&lt;code&gt;eqc_statem:show_states/1&lt;/code&gt; function, useful if you are quick-checking
your properties from the shell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eqc:quickcheck(eqc_statem:show_states(Prop)).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By including model states into the output you’ll tend to have some quite
verbose output, so the suggestion is to keep the flag disabled by default
and to enable it only when needed.&lt;/p&gt;

&lt;h3 id=&quot;generating-unique-lists&quot;&gt;Generating unique lists&lt;/h3&gt;

&lt;p&gt;Sometimes you have a complex data structure (let’s call it an &lt;em&gt;item&lt;/em&gt;)
and you want to generate a list of &lt;em&gt;items&lt;/em&gt;, ensuring that the list
does not contain duplicates. You’re going to add the generated list to
your state and you want to ensure that any element of the list already
exists in the state.&lt;/p&gt;

&lt;p&gt;The trick to solve the above in a way that ensures a decent shrinking
behaviour for your generator is to split the existing problem into
smaller ones. For the sake of simplicity, let’s assume that a
complex &lt;em&gt;item&lt;/em&gt; is a
2-elements tuple and that the first element of the tuple is an &lt;em&gt;id&lt;/em&gt;
which identifies a tuple. Let’s also assume that an &lt;em&gt;id&lt;/em&gt; is a natural
number.&lt;/p&gt;

&lt;p&gt;What you can do is to generate a list of unique ids. You can use the
&lt;code&gt;lists:usort/1&lt;/code&gt; function to ensure there are not duplicates. The
condition ensures that the generated element is not already part of
the state.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uids(S) -&amp;gt;
  ?LET(L, list(nat()),
       [X || X &amp;lt;- lists:usort(L), not lists:keymember(X, 1, S#state.items)]).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Starting from the generated list of unique ids, you can then construct a list
of &lt;em&gt;complex items&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;items(S) -&amp;gt;
  ?LET(Ids, uids(S), [item(Id) || Id &amp;lt;- Ids]).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where the &lt;code&gt;item/1&lt;/code&gt; function creates a complex data
structure starting from an identifier”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;item(Id) -&amp;gt;
  ?LET(Value, some_value_generator(), {Id, Value}).
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;no-spikes-in-time&quot;&gt;No spikes in time&lt;/h3&gt;

&lt;p&gt;One of the properties you may want to verify is that a single API request
doesn’t take longer than a certain amount of time. A simple way to
check this is to use the
&lt;a href=&quot;http://www.erlang.org/doc/man/timer.html#tc-1&quot;&gt;&lt;code&gt;timer:tc/1&lt;/code&gt;&lt;/a&gt;
function. There are a couple of important
considerations to be made about this function. For example, it is advised to run
it from a newly spawned process and to call &lt;code&gt;erlang:garbage_collect/1&lt;/code&gt;
just before using it, to lower the possibilities the Erlang garbage collector
starts its job during the measurement. Nonethless, if you don’t need
extremely accurate measurements, the following approach may be &lt;em&gt;good
enough&lt;/em&gt; for you.&lt;/p&gt;

&lt;p&gt;Let’s assume you have an &lt;em&gt;exec&lt;/em&gt; command in your Quickcheck &lt;em&gt;statem&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exec_command(S) -&amp;gt;
  Args = ...
  {call, ?MODULE, exec, [Args]}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your &lt;code&gt;?MODULE:exec/1&lt;/code&gt; function should then look something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exec(Args) -&amp;gt;
  timer:tc(server, exec, [Args]).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the postcondition would look something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exec_post(S, [Args], {Time, Result}) -&amp;gt;
  Time &amp;lt; expected_time(exec, Args) andalso Result ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;expected_time(exec, Args) -&amp;gt; 10 * 1000. %% 10 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a plus, you may want collect some statistics about times (which are
now part of the command results) in your property, via the
&lt;code&gt;aggregate/2,3&lt;/code&gt; and &lt;code&gt;collect/2,3&lt;/code&gt; functions.&lt;/p&gt;

&lt;h3 id=&quot;dealing-with-race-conditions&quot;&gt;Dealing with race conditions&lt;/h3&gt;

&lt;p&gt;In our case, it proved to be really hard to provoke the race condition
which caused our property to fail. This is why we wrapped our property into a
&lt;code&gt;?ALWAYS(N, Prop)&lt;/code&gt; to repeat the same test several time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;prop_sample() -&amp;gt;
  ?FORALL(Attempts, ?SHRINK(1, [100]),
    ?FORALL(Cmds, commands(?MODULE),
      ?ALWAYS(Attempts,
        begin
          ...
        end))).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how we &lt;em&gt;abused&lt;/em&gt; the &lt;code&gt;?SHRINK&lt;/code&gt; macro to force Quickcheck to test
each case once while searching for a failure and then 100 times for
each shrinking attempt.&lt;/p&gt;

&lt;h3 id=&quot;amending-the-counterexample&quot;&gt;Amending the counterexample&lt;/h3&gt;

&lt;p&gt;In case of a failing property, Quickcheck stores a copy of the
counter-example found. The last counter-example can be retrieved by
the &lt;code&gt;eqc:counterexample/0&lt;/code&gt; function. Once fetched, it can be used to
repeat a test or to test a different property in the same case, for
example using the &lt;code&gt;eqc:check(Prop)&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;eqc:counterexample/0&lt;/code&gt; function returns a &lt;code&gt;counterexample()&lt;/code&gt;
abstract data type. With the current version of Quickcheck, it’s
possible to decompose the return value into a list of two elements:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[N,C] = eqc:counterexample().
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second element (&lt;code&gt;C&lt;/code&gt;) is the actual counter-example, whilst the
first element (&lt;code&gt;N&lt;/code&gt;) represents the number of attempts you want to
re-try that test. If you want to re-try the counterexample a certain
amount of times, you can simply do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eqc:check(sample_eqc:prop_sample(), [1000, B]).
&lt;/code&gt;&lt;/pre&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/notes-on-erlang-quickcheck-part-2&quot;&gt;Notes on Erlang QuickCheck - Part 2&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on December 04, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Notes on Erlang QuickCheck]]></title>
  <link>http://iyengake.github.io/erlang/notes-on-erlang-quickcheck</link>
  <id>http://iyengake.github.io/erlang/notes-on-erlang-quickcheck</id>
  <updated>2014-09-12T00:00:00-00:00</updated>
  <published>2014-09-12T00:00:00-04:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;A few days ago I had the chance to spend some time with John Hughes,
one of the creators of the &lt;a href=&quot;http://www.quviq.com/products/erlang-quickcheck/&quot;&gt;Erlang
Quickcheck&lt;/a&gt;.
We looked at some of our APIs and went through some of our QuickCheck models.
It has been an incredibly helpful learning experience, so I thought to
share some of the highlights from our discussions to a broader public.&lt;/p&gt;

&lt;p&gt;The following notes are listed in a more or less random order
and they assume that you are already familiar with QuickCheck (&lt;em&gt;EQC&lt;/em&gt;) and
QuickCheck abstract state machines.&lt;/p&gt;

&lt;h3 id=&quot;generating-sublists&quot;&gt;Generating sublists&lt;/h3&gt;

&lt;p&gt;Given a list of items - say, atoms - you want to extract random sublists
from the original list.&lt;/p&gt;

&lt;p&gt;One way of doing this is to pair
each element of the list with a boolean generator and to filter out
&lt;em&gt;false&lt;/em&gt; values:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;sublist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;L0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;eqc_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;L0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since the boolean generator shrinks towards the &lt;em&gt;false&lt;/em&gt; value, your
sublist shrinks towards the empty list, which is
what you want in most cases. If you need to invert this behaviour and
you want to shrink - or should I say &lt;em&gt;grow&lt;/em&gt; - towards the entire list, you can
simply toggle the &lt;em&gt;true&lt;/em&gt; boolean and set it to &lt;em&gt;false&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;sublist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;L0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;eqc_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;L0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;use-elements1-or-oneof1&quot;&gt;Use &lt;code&gt;elements/1&lt;/code&gt; or &lt;code&gt;oneof/1&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;In QuickCheck two similar functions are available: &lt;code&gt;elements/1&lt;/code&gt; and
&lt;code&gt;oneof/1&lt;/code&gt;. They look similar at a first glance, so you may wonder
which one to use.&lt;/p&gt;

&lt;p&gt;The main difference between the two functions stands in the input arguments.
The &lt;code&gt;elements/1&lt;/code&gt; takes a list of terms as input and it generates an
element from it, whilst &lt;code&gt;oneof/1&lt;/code&gt; takes a list of generators and it
picks one of them.&lt;/p&gt;

&lt;p&gt;The above is important for how the two functions shrink. &lt;code&gt;elements/1&lt;/code&gt;
shrinks towards the first element of the list, whilst &lt;code&gt;oneof/1&lt;/code&gt;
shrinks towards the &lt;em&gt;failing&lt;/em&gt; one.&lt;/p&gt;

&lt;h3 id=&quot;verify-your-generators&quot;&gt;Verify your generators&lt;/h3&gt;

&lt;p&gt;Whenever you implement a new generator or even if you simply use a
built-in one, you may want to verify that the generator works
as you expect. You can use &lt;code&gt;eqc_gen:sample/1&lt;/code&gt; for the purpose.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;eqc_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;eqc_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;eqc_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\b\f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is also useful to verify the sequence of commands that your abstract state
machine can generate:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;eqc_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;eqc_statem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_eqc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;eqc_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;eqc_statem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parallel_commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_eqc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where &lt;code&gt;my_eqc&lt;/code&gt; is the module where your &lt;em&gt;eqc_statem&lt;/em&gt; is defined.&lt;/p&gt;

&lt;h3 id=&quot;think-shrinking&quot;&gt;Think shrinking&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;elements/1&lt;/code&gt; generator shrinks towards the beginning of the list.
Keep that in mind when implementing your QuickCheck abstract state machines. If
you keep a list of elements - say, pids - in your model state and you
plan to use &lt;code&gt;elements/1&lt;/code&gt; on them, ensure that whenever a new element is added
to the state, it is always appended at the end of a list, &lt;a href=&quot;http://www.erlang.org/doc/efficiency_guide/myths.html#id56691&quot;&gt;even if you
are a seasoned Erlang developer and it feels a bit unnatural to
you&lt;/a&gt;. This
will give you better shrinking in most cases.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;err&quot;&gt;###&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DO&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;add_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;#state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;#state.pids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;###&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DON&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;add_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;#state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Pid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;#state.pids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don’t bother about quadratic complexity here, since you will only run
this code during tests and you will probably have only a few elements
in your state at any given time.&lt;/p&gt;

&lt;h3 id=&quot;living-in-the-erlang-shell&quot;&gt;Living in the Erlang shell&lt;/h3&gt;

&lt;p&gt;Sometimes the feedback loop for executing QuickCheck tests is
long and/or the way properties are verified is inflexible. As an
example, you may be wrapping your QuickCheck
properties in EUnit suites to get code coverage information, or you
may run QuickCheck via &lt;a href=&quot;https://github.com/basho/rebar&quot;&gt;rebar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When implementing a new property or debugging an abstract state
machine, try to run QuickCheck from the Erlang shell as much as
possible. Being able to run &lt;code&gt;eqc:check/1&lt;/code&gt; on your latest
counterexample, to verify the list of generated commands using the
&lt;code&gt;sample/1&lt;/code&gt; function (as explained above) and to re-run a
property in seconds after a quick fix is a great win in the
long term.&lt;/p&gt;

&lt;h3 id=&quot;how-long-will-my-commands-take&quot;&gt;How long will my commands take?&lt;/h3&gt;

&lt;p&gt;In your QuickCheck abstract state machine, you could have operations which take
long time, so you may want to set a timeout for the entire test suite. You don’t
want to set the timeout too small, to avoid incurring into &lt;em&gt;occasionaly
failing test cases&lt;/em&gt; (due to the timeout being hit, in case long
sequences of commands are generated). On the other hand, you don’t
want to set the timeout too long, since you don’t want your tests to
run forever. So, what’s a good value for a timeout?&lt;/p&gt;

&lt;p&gt;Well, since the sequence of command is available in your property, you
could calculate a timeout value from the sequence of commands itself.
The following snippet should give you a better idea of what I mean here.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;prop_bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FORALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;my_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;expected_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;expected_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;non-derministic-test-outcomes&quot;&gt;Non derministic test outcomes&lt;/h3&gt;

&lt;p&gt;In certain situations test outcomes are non-deterministic.
In such cases, have a look to the &lt;code&gt;?SOMETIMES/2&lt;/code&gt; macro.
An extract from the QuickCheck documentation follows.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SOMETIMES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Prop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeatedly&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Prop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sometimes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;used&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;situations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outcomes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deterministic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cases&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consistently&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;such&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FORALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,...,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SOMETIMES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,...))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cases&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SOMETIMES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;very&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;likely&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;more-compacted-state-machines&quot;&gt;More compacted State Machines&lt;/h3&gt;

&lt;p&gt;The most recent versions of QuickCheck have a new format for defining
an abstract state machine, which is more readable and concise and which requires
much less boilerplate than before. You can
find extensive documentation about the new &lt;em&gt;statem&lt;/em&gt; format by looking at the
documentation in the &lt;code&gt;eqc_group_commands&lt;/code&gt; module. Not easy to find, which is
why I’m mentioning it here.&lt;/p&gt;

&lt;h3 id=&quot;failing-is-good&quot;&gt;Failing is good&lt;/h3&gt;

&lt;p&gt;Too often your QuickCheck tests pass and your properties are
successful. In many occasions it’s useful to ensure that your tests
are meaningful by testing properties that should &lt;em&gt;not&lt;/em&gt; succeed. You
can perform negative testing by wrapping a property using the
&lt;code&gt;eqc:fails/1&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;fails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FORALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;testing-race-conditions&quot;&gt;Testing race conditions&lt;/h3&gt;

&lt;p&gt;In QuickCheck, going from sequential testing to parallel testing is a
snap in most cases. As an example, the following property:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;prop_registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FORALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;pretty_commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;Res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Would become:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;prop_registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FORALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parallel_commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_parallel_commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;pretty_commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;Res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can use &lt;em&gt;preconditions&lt;/em&gt; to ensure logical precedence between operations.&lt;/p&gt;

&lt;h3 id=&quot;running-on-multicore&quot;&gt;Running on multicore&lt;/h3&gt;

&lt;p&gt;If you are testing race conditions and you are using &lt;code&gt;parallel_cmds&lt;/code&gt; as above,
ensure you are running on a multicore system. Do not underestimate
this requisite since, even if your machine has at least 4 or 8 cores,
your application could be running in a VM or in a Jenkins slave with
limited cores. In such a situation, in fact, the Erlang scheduler will
try as hard as possible to prevent context switches between processes
and your parallel tests may be less useful than you think.&lt;/p&gt;

&lt;h3 id=&quot;about-check1-and-check2&quot;&gt;About &lt;code&gt;check/1&lt;/code&gt; and &lt;code&gt;check/2&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;It’s possible to test a property for a given case (usually the current
counterexample) by using the &lt;code&gt;check/1&lt;/code&gt; and &lt;code&gt;check/2&lt;/code&gt; functions
exported by the &lt;code&gt;eqc&lt;/code&gt; module. An interesting application of the
&lt;code&gt;check&lt;/code&gt; functions is in a system where plenty of log information are
produced by the system under test while running QuickCheck. By using
the following pattern, it will be possible to replay a failing test
case and to display only relevant logs.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;eqc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quickcheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Repeating failing test&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;~n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;eqc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a plus, the &lt;code&gt;check/2&lt;/code&gt; function can be used without a QuickCheck
licence, allowing anyone to run tests that a licenced user has
generated.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/notes-on-erlang-quickcheck&quot;&gt;Notes on Erlang QuickCheck&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on September 12, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Rebar and the Developer Shell]]></title>
  <link>http://iyengake.github.io/erlang/rebar-and-the-developer-release</link>
  <id>http://iyengake.github.io/erlang/rebar-and-the-developer-release</id>
  <updated>2014-02-09T00:00:00-00:00</updated>
  <published>2014-02-09T00:00:00-05:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;In some cases (e.g. during development) it is helpful to symlink
applications into a release, rather than copying them. I believe
&lt;em&gt;relx&lt;/em&gt; has a dev-mode option for that. In rebar-based projects, what I
end up doing in most of the cases is to add something like this into a
Makefile:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-makefile&quot; data-lang=&quot;makefile&quot;&gt;&lt;span class=&quot;nf&quot;&gt;devrel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;foreach dep, &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wildcard deps/* apps/*&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;_target :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wildcard rel/svt/lib/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shell basename &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dep&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;-*&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    rm -rf &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;_target&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ln -sfn &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;abspath &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dep&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;_target&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/basho/riak/blob/develop/Makefile#L102&quot;&gt;&lt;em&gt;Riak&lt;/em&gt; does something on these
lines&lt;/a&gt;, too.&lt;/p&gt;

&lt;p&gt;Even if I don’t think this behaviour is achievable directly via
&lt;em&gt;reltool&lt;/em&gt;, it could be implement as an optional step in &lt;em&gt;rebar_reltool&lt;/em&gt;
or via a dedicated plugin or separate command.&lt;/p&gt;

&lt;p&gt;I will probably give this a try at some point. Does anyone have an
opinion on the above?&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/rebar-and-the-developer-release&quot;&gt;Rebar and the Developer Shell&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on February 09, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Welcome to the World of Erlang SSH]]></title>
  <link>http://iyengake.github.io/erlang/welcome-to-the-world-of-erlang-ssh</link>
  <id>http://iyengake.github.io/erlang/welcome-to-the-world-of-erlang-ssh</id>
  <updated>2014-02-08T00:00:00-00:00</updated>
  <published>2014-02-08T00:00:00-05:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I’ve been playing around with the Erlang SSH application lately and I’ve
noticed some weird behaviours which I decided to report here for future
reference.&lt;/p&gt;

&lt;p&gt;The general impression that I got from the application - and from its
coursins such as &lt;em&gt;crypto&lt;/em&gt;, &lt;em&gt;public_key&lt;/em&gt; and &lt;em&gt;ssh&lt;/em&gt; - is that it does
not reflect the usual OTP quality standards and that it should be used
with care.&lt;/p&gt;

&lt;h3 id=&quot;misleading-error-message-on-sshsftpstartchannel1-in-case-of-missing-shell&quot;&gt;Misleading error message on &lt;em&gt;ssh_sftp:start_channel/1&lt;/em&gt; in case of missing shell&lt;/h3&gt;

&lt;p&gt;When starting a SFTP channel towards a system where user does not have
a shell (i.e. it has &lt;code&gt;/bin/false&lt;/code&gt; or equilvalent assigned in the
&lt;code&gt;/etc/passwd&lt;/code&gt; a misleading error message is returned to the user:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                         &lt;span class=&quot;n&quot;&gt;wait_for_version_negotiation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}}&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;  &lt;span class=&quot;nn&quot;&gt;gen_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;188&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ssh_channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh_channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ssh_sftp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh_sftp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;93&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;export_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asn1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rabbitmq&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SSHRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SFTPChannelRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ssh_sftp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SSHRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This has been experienced in both R16B03 and R15B03.&lt;/p&gt;

&lt;h3 id=&quot;crash-on-ssh-connect&quot;&gt;Crash on SSH connect&lt;/h3&gt;

&lt;p&gt;On R16B03, when connecting via SSH on OS X Mavericks I get:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;side&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Internal error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;  &lt;span class=&quot;nn&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;====&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Feb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;06&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Erlang&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function_clause&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Stacktace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh_connection_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userauth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh_msg_userauth_pk_ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;internal-crash-is-not-real-when-using-the-keycb-option&quot;&gt;Internal Crash is not real when using the &lt;em&gt;key_cb&lt;/em&gt; option&lt;/h3&gt;

&lt;p&gt;When using the &lt;em&gt;key_cb&lt;/em&gt; option on &lt;code&gt;ssh:connect/3&lt;/code&gt; the user should
implement a series of callback functions. Not implementing them and
trying to connect results in an “internal error” which invites the
user to send a bug report. The undef callback function should be
catched and reported as a normal error, not an internal one.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;please report this to erlang-bugs@erlang.org&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/welcome-to-the-world-of-erlang-ssh&quot;&gt;Welcome to the World of Erlang SSH&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on February 08, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Skerleton: bootstrap Erlang Projects in Seconds]]></title>
  <link>http://iyengake.github.io/erlang/skerleton-bootstrap-erlang-projects-in-seconds</link>
  <id>http://iyengake.github.io/erlang/skerleton-bootstrap-erlang-projects-in-seconds</id>
  <updated>2014-02-08T00:00:00-00:00</updated>
  <published>2014-02-08T00:00:00-05:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Every time you create a brand-new Erlang project, some manual steps
are required. Most of the times, this means fetching &lt;code&gt;rebar&lt;/code&gt; via
&lt;code&gt;wget&lt;/code&gt;, copying and pasting a &lt;code&gt;rebar.config&lt;/code&gt; from a previous project,
making a bunch of new directories, creating an empty release, and so
on and so forth.&lt;/p&gt;

&lt;p&gt;To ease the above, I created a simple skeleton project that you can
use to bootstrap your new Erlang projects. Here is a quickstart on how
to use skerleton. You can find the skerleton source code on
&lt;a href=&quot;https://github.com/robertoaloi/skerleton&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;create-a-new-project-based-on-skerleton-and-bootstrap-it&quot;&gt;Create a new project based on skerleton and bootstrap it&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/robertoaloi/skerleton.git my_app
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my_app
./bootstrap.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;remove-the-skerleton-left-overs-and-you-are-ready-to-go&quot;&gt;Remove the skerleton left-overs and you are ready to go&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rm -rf bootstrap.sh README.md .git rel/reltool.config.template
git init
git add . &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -a -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Initial commit.&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;start-your-erlang-node&quot;&gt;start your Erlang node&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;make rel
rel/my_app/bin/my_app console&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/skerleton-bootstrap-erlang-projects-in-seconds&quot;&gt;Skerleton: bootstrap Erlang Projects in Seconds&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on February 08, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Killin' them softly (by name)]]></title>
  <link>http://iyengake.github.io/erlang/killin-them-softly-by-name</link>
  <id>http://iyengake.github.io/erlang/killin-them-softly-by-name</id>
  <updated>2014-02-08T00:00:00-00:00</updated>
  <published>2014-02-08T00:00:00-05:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Sometimes is useful to kill an Erlang node by name.
The task involves several manual steps, Here is a little helper which
you might find helpful.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/8884096.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Remember that if you want to kill all Erlang nodes running on a
system rather than a specific one, you can simply do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;killall beam.smp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/killin-them-softly-by-name&quot;&gt;Killin' them softly (by name)&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on February 08, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Create and deploy your Erlang / Cowboy Application on Heroku in 30 minutes]]></title>
  <link>http://iyengake.github.io/erlang/create-deploy-erlang-cowboy-application-heroku</link>
  <id>http://iyengake.github.io/erlang/create-deploy-erlang-cowboy-application-heroku</id>
  <updated>2013-07-13T00:00:00-00:00</updated>
  <published>2013-07-13T00:00:00-04:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/herloku.png&quot; alt=&quot;Herloku&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.erlang.org&quot;&gt;Erlang&lt;/a&gt; is a programming language used to build massively scalable soft real-time systems with requirements on high availability.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/extend/cowboy&quot;&gt;Cowboy&lt;/a&gt; is a small, fast and modular HTTP server written in Erlang.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; is a cloud application platform which allows you to deploy and scale your own application at pleasure.&lt;/p&gt;

&lt;p&gt;In this post, we will write an Erlang/Cowboy Web Application from scratch, deploying it on Heroku. Since Heroku &lt;a href=&quot;https://devcenter.heroku.com/articles/usage-and-billing#750-free-dyno-hours-per-app&quot;&gt;offers a free tier for deploying web apps&lt;/a&gt;, this will cost you nothing. Also, the entire process should take no more than half an hour.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You have &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt; installed on your machine.&lt;/li&gt;
  &lt;li&gt;You have &lt;a href=&quot;https://www.erlang-solutions.com/downloads/download-erlang-otp&quot;&gt;Erlang&lt;/a&gt; installed on your machine. In this example I will be using R15B01.&lt;/li&gt;
  &lt;li&gt;You are familiar with the basic concepts of &lt;a href=&quot;http://erlang.org/doc/&quot;&gt;Erlang and OTP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You have a free account on &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;You have &lt;a href=&quot;https://toolbelt.heroku.com/&quot;&gt;the Heroku start-kit for your OS&lt;/a&gt; installed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#rebar&quot;&gt;Create the skeleton of an Erlang app using Rebar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heroku&quot;&gt;Create a Heroku application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cowboy&quot;&gt;Use Cowboy to create a simple web app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#compile&quot;&gt;Compile and run your application locally&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#config&quot;&gt;Configure your Heroku app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deploy&quot;&gt;Deploy your Erlang application on Heroku&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#profile&quot;&gt;Profile your deployed Erlang application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&quot;rebar&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-the-skeleton-of-an-erlang-app-using-rebar&quot;&gt;Create the skeleton of an Erlang app using Rebar&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rebar/rebar&quot;&gt;Rebar&lt;/a&gt; is the de-facto standard build-tool for Erlang projects.&lt;/p&gt;

&lt;p&gt;Fetch rebar from Github and bootstrap it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/rebar/rebar.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;rebar
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./bootstrap
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Initialize a new git repository and use rebar to create the skeleton for a new Erlang app. I decided to call my application &lt;em&gt;erlblog&lt;/em&gt;. Call your application differently, replacing every occurrence of &lt;em&gt;erlblog&lt;/em&gt; with your favourite application name in the instructions below. Please note that this is &lt;strong&gt;not&lt;/strong&gt; optional, since two applications cannot have the same name on Heroku and you don’t dare to clash with my own application.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init erlblog
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;erlblog
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cp ../rebar/rebar .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./rebar create-app &lt;span class=&quot;nv&quot;&gt;appid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;erlblog&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Commit what you have done in git:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add rebar src
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Add rebar skeleton&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id=&quot;heroku&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-a-heroku-application&quot;&gt;Create a Heroku application&lt;/h3&gt;

&lt;p&gt;Login into Heroku using the &lt;em&gt;heroku&lt;/em&gt; command from the terminal.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;heroku login&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Use your Heroku email and password to login.&lt;/p&gt;

&lt;p&gt;Now create a new Heroku app, using the Erlang buildpack from &lt;a href=&quot;https://github.com/archaelus&quot;&gt;@archaelus&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;heroku create erlblog --stack cedar --buildpack https://github.com/archaelus/heroku-buildpack-erlang&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id=&quot;cowboy&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;use-cowboy-to-create-a-simple-web-app&quot;&gt;Use Cowboy to create a simple web app&lt;/h3&gt;

&lt;p&gt;Add the &lt;em&gt;Cowboy&lt;/em&gt; web server as a rebar dependency:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;sc&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rebar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cowboy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.8.4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://github.com/extend/cowboy.git&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.8.4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}}&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;]}.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add &lt;em&gt;cowboy&lt;/em&gt; to the list of applications in your &lt;strong&gt;.app.src&lt;/strong&gt; file. Also, set the &lt;em&gt;http_port&lt;/em&gt; environment variable to &lt;em&gt;8080&lt;/em&gt; (see next paragraphs).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;sc&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erlblog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erlblog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;stdlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;cowboy&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;]},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erlblog_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;]}.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Modify the &lt;strong&gt;start/2&lt;/strong&gt; function from the &lt;strong&gt;erlblog_app&lt;/strong&gt; module so that Cowboy starts a pool of acceptors when the erlblog application is started. Configure the Cowboy dispatcher with a single dispatching rule, routing all requests to &lt;strong&gt;’/’&lt;/strong&gt; to the &lt;strong&gt;erlblog_handler&lt;/strong&gt; (see below).&lt;/p&gt;

&lt;p&gt;Heroku assigns random ports to your application and uses the OS environment variable &lt;em&gt;$PORT&lt;/em&gt; to inform you about the port on which your web server should listen to. Therefore, in the following code we read that environment variable, defaulting to port 8080 in case the environment variable is not specified. This is useful, for example, if you want to try your web server locally before deploying it on Heroku.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;sc&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erlblog_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erl&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erlblog_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;behaviour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;%% Application callbacks&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;C_ACCEPTORS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% ===================================================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% Application callbacks&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% ===================================================================&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StartType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StartArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;Routes&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;Dispatch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cowboy_router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;Port&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;TransOpts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ProtoOpts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cowboy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C_ACCEPTORS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TransOpts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ProtoOpts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;erlblog_sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;%% ===================================================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% Internal functions&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% ===================================================================&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erlblog_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;PORT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;Port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;Other&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;list_to_integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s now implement a basic HTTP Cowboy handler, which simply replies with a 200 status code and a notorious welcoming message to any incoming request:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;sc&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erlblog_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erl&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erlblog_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Transport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Req2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cowboy_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Req2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, let’s create an interface module which will be responsible for starting your &lt;em&gt;erlblog&lt;/em&gt; application together with all its dependencies.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;sc&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erlblog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erl&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erlblog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ranch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cowboy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erlblog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id=&quot;compile&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;compile-and-run-your-application-locally&quot;&gt;Compile and run your application locally&lt;/h3&gt;

&lt;p&gt;Compile the &lt;em&gt;erlblog&lt;/em&gt; application using rebar:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./rebar get-deps compile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Start the application and verify that everything works as expected:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;erl -pa ebin deps/*/ebin -s erlblog&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From the Erlang shell, type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;which_applications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The erlblog application should be included in the output.&lt;/p&gt;

&lt;p&gt;Finally, point your browser to:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;http://localhost:8080&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And verify that the string &lt;em&gt;“Hello World!”&lt;/em&gt; is there.&lt;/p&gt;

&lt;p&gt;You can use &lt;strong&gt;Ctrl-G q&lt;/strong&gt; to exit the Erlang shell.&lt;/p&gt;

&lt;p&gt;If everything works as expected, commit everything to git:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add rebar.config src
git ci -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Include Cowboy skeleton&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id=&quot;config&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;configure-your-heroku-app&quot;&gt;Configure your Heroku app&lt;/h3&gt;

&lt;p&gt;You need to tell Heroku that you’re going to deploy an Erlang Application. To do so, you need to create a &lt;em&gt;Procfile&lt;/em&gt; file, containing your start-up script:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat Procfile

web: erl -pa ebin deps/*/ebin -noshell -noinput -s erlblog&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Commit your changes to git:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add Procfile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git ci -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Add Procfile&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You also want to specify that your application requires Erlang R15B01:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat .preferred_otp_version

OTP_R15B01&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Commit your changes to git:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .preferred_otp_version
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git ci -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Specify R15B01 as Erlang version&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id=&quot;deploy&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;deploy-your-erlang-application-on-heroku&quot;&gt;Deploy your Erlang application on Heroku&lt;/h3&gt;

&lt;p&gt;That’s the beautiful part:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push heroku master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should now be able to access the erlblog application at:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;http://erlblog.herokuapp.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If something does not work as expected, you might want to verify the logs for your Heroku app:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;heroku logs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id=&quot;profile&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;profile-your-deployed-erlang-application&quot;&gt;Profile your deployed Erlang application&lt;/h3&gt;

&lt;p&gt;Let’s now verify how many requests our erlblog application can handle. Please note that to run the steps below, you need &lt;a href=&quot;http://httpd.apache.org/docs/2.2/programs/ab.html&quot;&gt;ab&lt;/a&gt; and &lt;a href=&quot;http://www.gnuplot.info/&quot;&gt;gnuplot&lt;/a&gt; installed on your machine.&lt;/p&gt;

&lt;p&gt;Using ApacheBench, perform 5000 HTTP requests against your new web server, using 20 concurrent requests. Store the output in the &lt;em&gt;gnuplot.dat&lt;/em&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ab -n &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt; -c &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt; -g gnuplot.dat http://erlblog.herokuapp.com/

This is ApacheBench, Version 2.3 &amp;lt;&lt;span class=&quot;nv&quot;&gt;$Revision&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;655654&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt;
Copyright &lt;span class=&quot;m&quot;&gt;1996&lt;/span&gt; Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking erlblog.herokuapp.com &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;be patient&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Completed &lt;span class=&quot;m&quot;&gt;500&lt;/span&gt; requests
Completed &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt; requests
Completed &lt;span class=&quot;m&quot;&gt;1500&lt;/span&gt; requests
Completed &lt;span class=&quot;m&quot;&gt;2000&lt;/span&gt; requests
Completed &lt;span class=&quot;m&quot;&gt;2500&lt;/span&gt; requests
Completed &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt; requests
Completed &lt;span class=&quot;m&quot;&gt;3500&lt;/span&gt; requests
Completed &lt;span class=&quot;m&quot;&gt;4000&lt;/span&gt; requests
Completed &lt;span class=&quot;m&quot;&gt;4500&lt;/span&gt; requests
Completed &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt; requests
Finished &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt; requests


Server Software:        Cowboy
Server Hostname:        erlblog.herokuapp.com
Server Port:            80

Document Path:          /
Document Length:        &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; bytes

Concurrency Level:      20
Time taken &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; tests:   71.473 seconds
Complete requests:      5000
Failed requests:        0
Write errors:           0
Total transferred:      &lt;span class=&quot;m&quot;&gt;615000&lt;/span&gt; bytes
HTML transferred:       &lt;span class=&quot;m&quot;&gt;60000&lt;/span&gt; bytes
Requests per second:    69.96 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       285.891 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ms&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mean&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Time per request:       14.295 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ms&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Transfer rate:          8.40 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Kbytes/sec&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; received

Connection Times &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
              min  mean&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+/-sd&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; median   max
Connect:      &lt;span class=&quot;m&quot;&gt;121&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;130&lt;/span&gt;  46.4    &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;    1317
Processing:   &lt;span class=&quot;m&quot;&gt;126&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;154&lt;/span&gt;  60.0    &lt;span class=&quot;m&quot;&gt;140&lt;/span&gt;    1176
Waiting:      &lt;span class=&quot;m&quot;&gt;125&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;153&lt;/span&gt;  60.0    &lt;span class=&quot;m&quot;&gt;139&lt;/span&gt;    1162
Total:        &lt;span class=&quot;m&quot;&gt;248&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;284&lt;/span&gt;  75.7    &lt;span class=&quot;m&quot;&gt;268&lt;/span&gt;    1495

Percentage of the requests served within a certain &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  50%    268
  66%    275
  75%    282
  80%    286
  90%    307
  95%    343
  98%    441
  99%    617
 100%   &lt;span class=&quot;m&quot;&gt;1495&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;longest request&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using our Heroku free tier (1 single dyno worker), our Cowboy Web Server managed to complete all &lt;strong&gt;5000 requests&lt;/strong&gt;, allowing &lt;strong&gt;~70 requests per second&lt;/strong&gt;. 90% of the requests have been served in about &lt;strong&gt;300 ms&lt;/strong&gt;. Of course, such a good result has been possible only because we surely have been hitting some kind of cache in the Heroku servers. Still, not bad for a free hosting solution for a simple Erlang applications.&lt;/p&gt;

&lt;p&gt;We can visualize the above results using Gnuplot:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gnuplot

gnuplot&amp;gt; plot &lt;span class=&quot;s2&quot;&gt;&amp;quot;gnuplot.dat&amp;quot;&lt;/span&gt; using &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; smooth sbezier with lines title &lt;span class=&quot;s2&quot;&gt;&amp;quot;Cowboy Heroku Benchmarking&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/gnuplot.png&quot; alt=&quot;Gnuplot&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The complete source code for the &lt;em&gt;erlblog&lt;/em&gt; application is available &lt;a href=&quot;https://github.com/robertoaloi/erlblog&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/create-deploy-erlang-cowboy-application-heroku&quot;&gt;Create and deploy your Erlang / Cowboy Application on Heroku in 30 minutes&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on July 13, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Erlang User Conference 2013]]></title>
  <link>http://iyengake.github.io/erlang/euc</link>
  <id>http://iyengake.github.io/erlang/euc</id>
  <updated>2013-04-29T00:00:00-00:00</updated>
  <published>2013-04-29T00:00:00-04:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;div style=&quot;text-align:center&quot;&gt;
     &lt;a href=&quot;http://www.erlang-factory.com/conference/ErlangUserConference2013&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/seeyouthere.jpg&quot; alt=&quot;EUC 2013&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Hej, hej! I will be training at the Erlang User Conference 2013 in Stockholm, Sweden.&lt;br /&gt;
Looking forward to see you all there.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/euc&quot;&gt;Erlang User Conference 2013&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on April 29, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Erlang Workshop in Rome, Italy]]></title>
  <link>http://iyengake.github.io/erlang/erlang-workshop</link>
  <id>http://iyengake.github.io/erlang/erlang-workshop</id>
  <updated>2013-02-26T00:00:00-00:00</updated>
  <published>2013-02-26T00:00:00-05:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;div style=&quot;text-align:center&quot;&gt;
&lt;a href=&quot;http://rome.codemotionworld.com/workshop/erlang-multi-core-e-massive-scalability/&quot; target=&quot;_blank&quot;&gt;
&lt;img style=&quot;width:60%&quot; src=&quot;/images/erlang-workshop.png&quot; alt=&quot;Erlang Workshop Codemotion - Rome 2013&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For the third year in a row, Erlang Solutions will be present at Codemotion, one of the biggest IT conferences in Italy which focuses on innovative programming languages.This year, we propose a one day hands-on workshop on the Erlang programming language. I will hold the workshop in Rome on the 20th March. The workshop is titled”Erlang: multi-core and massive scalability” and it consists of a practical overview of the Erlang programming language.&lt;/p&gt;

&lt;p&gt;You can register to the workshop &lt;a href=&quot;http://rome.codemotionworld.com/workshop/erlang-multi-core-e-massive-scalability/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/erlang-workshop&quot;&gt;Erlang Workshop in Rome, Italy&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on February 26, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Ever wondered which application a given Erlang module belongs to?]]></title>
  <link>http://iyengake.github.io/erlang/ever-wondered-which-application-a-given-erlang-module-belongs-to</link>
  <id>http://iyengake.github.io/erlang/ever-wondered-which-application-a-given-erlang-module-belongs-to</id>
  <updated>2012-12-12T00:00:00-00:00</updated>
  <published>2012-12-12T00:00:00-05:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;For example, wouldn’t it be awesome to have the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./efind.sh cover
tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, here is a little script which might allow you to save some time:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4268342.js?file=efind.sh&quot;&gt; &lt;/script&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/ever-wondered-which-application-a-given-erlang-module-belongs-to&quot;&gt;Ever wondered which application a given Erlang module belongs to?&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on December 12, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA['Erlang and the Cloud' Codemotion slides available online]]></title>
  <link>http://iyengake.github.io/erlang/slides-from-my-erlang-codemotion-talk-available-online</link>
  <id>http://iyengake.github.io/erlang/slides-from-my-erlang-codemotion-talk-available-online</id>
  <updated>2012-11-17T00:00:00-00:00</updated>
  <published>2012-11-17T00:00:00-05:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;The slides from my &lt;em&gt;Erlang and the Cloud&lt;/em&gt; talk are now available on &lt;a href=&quot;https://speakerdeck.com/robertoaloi/erlang-and-the-cloud&quot; target=&quot;_blank&quot;&gt;Speakerdeck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/slides-from-my-erlang-codemotion-talk-available-online&quot;&gt;'Erlang and the Cloud' Codemotion slides available online&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on November 17, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Codemotion Venice 2012: Erlang and the Cloud]]></title>
  <link>http://iyengake.github.io/erlang/codemotion-venice-2012-erlang-and-the-cloud</link>
  <id>http://iyengake.github.io/erlang/codemotion-venice-2012-erlang-and-the-cloud</id>
  <updated>2012-11-15T00:00:00-00:00</updated>
  <published>2012-11-15T00:00:00-05:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;div style=&quot;text-align:center&quot;&gt;
&lt;a href=&quot;http://www.codemotion.it&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/images/codemotion-logo.png&quot; alt=&quot;Codemotion Venice 2012&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;A special edition of the Codemotion conference &lt;a href=&quot;http://www.codemotion.it&quot; target=&quot;_blank&quot;&gt; will be held this year in Venice on Saturday the 17th November&lt;/a&gt;. The event is free to attend.&lt;/p&gt;

&lt;p&gt;I will give a talk at 15.40, titled &lt;em&gt;“Erlang and the Cloud”&lt;/em&gt;. I will be discussing the suitability of the Erlang programming language for scenarios such as cloud computing and multi-core, explaining how the concurrency model of Erlang maps to multicore architectures and what principles should be kept in mind when designing a scalable application. The Twitter hashtag for my talk is &lt;em&gt;#lang06&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The talk should be interesting on its own - well, I’ll do my best - but, in case you’re still dubious about attending, let me give you three extra reasons why you should join us:&lt;/p&gt;

&lt;h3 id=&quot;erlang-solutions-is-hiring&quot;&gt;1. Erlang Solutions is hiring&lt;/h3&gt;

&lt;p&gt;We have many positions open for Erlang enthusiasts in Sweden, UK, Poland and USA. I will be able to provide you more information about our hiring process. Also, feel free to leave me a copy of your CV.&lt;/p&gt;

&lt;h3 id=&quot;free-erlang-e-learning&quot;&gt;2. Free Erlang E-learning&lt;/h3&gt;

&lt;p&gt;Erlang Solutions, in collaboration with the University of Kent, has developed an e-learning platform dedicated to Erlang. The system tries to deliver, at a distance, the same high-quality interactive experience that is delivered in our face-to-face training courses. &lt;strong&gt;During the conference, I will give away 25 e-learning vouchers&lt;/strong&gt; which will give you &lt;strong&gt;free&lt;/strong&gt; access to our online &lt;em&gt;Erlang Express&lt;/em&gt; course, featuring 6 hours of video lectures, exercises, quizzes and more.&lt;/p&gt;

&lt;h3 id=&quot;giveaways&quot;&gt;3. Giveaways&lt;/h3&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;a href=&quot;/images/codemotion-giveaways.jpg&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/images/codemotion-giveaways.jpg&quot; alt=&quot;Erlang Giveaways&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Giveaways are always a pleasant surprise. Ask me for pens, stickers and weird white stuff, before I run out of stock!&lt;/p&gt;

&lt;p&gt;See you all in Venice.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/codemotion-venice-2012-erlang-and-the-cloud&quot;&gt;Codemotion Venice 2012: Erlang and the Cloud&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on November 15, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[How to Checkout GitHub Pull Requests Locally]]></title>
  <link>http://iyengake.github.io/git/checkout-github-pull-requests-locally</link>
  <id>http://iyengake.github.io/git/checkout-github-pull-requests-locally</id>
  <updated>2012-11-12T00:00:00-00:00</updated>
  <published>2012-11-12T00:00:00-05:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I’ve recently bumped into the following useful &lt;a href=&quot;https://gist.github.com/3342247&quot; target=&quot;_blank&quot;&gt;gist&lt;/a&gt;, which I decided to share with all of you.&lt;/p&gt;

&lt;p&gt;It’s possible to instruct git to fetch pull requests together with the other project branches. Simply open the &lt;code&gt;.git/config&lt;/code&gt; file for your project and add the following line under the &lt;code&gt;[remote &quot;origin&quot;]&lt;/code&gt; section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enable this behaviour for all of your git projects, simply run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global --add remote.origin.fetch &quot;+refs/pull/*/head:refs/remotes/origin/pr/*&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fetch all the pull requests for a project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git fetch origin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To checkout a specific pull request (say, #53):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout pr/53
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/git/checkout-github-pull-requests-locally&quot;&gt;How to Checkout GitHub Pull Requests Locally&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on November 12, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[History of a Generation]]></title>
  <link>http://iyengake.github.io/italy/history-of-a-generation</link>
  <id>http://iyengake.github.io/italy/history-of-a-generation</id>
  <updated>2012-09-12T00:00:00-00:00</updated>
  <published>2012-09-12T00:00:00-04:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I wanted to translate &lt;a href=&quot;http://torto45.wordpress.com/2010/10/29/hello-world/&quot; target=&quot;_blank&quot;&gt;this blog post&lt;/a&gt; into English, cause I believe it renders an almost perfect picture of Italy as it is today. This is a free translation and all the rights for the original blog post belong to the original author.&lt;/p&gt;

&lt;p&gt;When I was a child, I was told:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Study, or you’ll go nowhere.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I’ve studied.&lt;/p&gt;

&lt;p&gt;After completing my academic career, I’ve been told:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Why did you spend so much time on a degree? Don’t you know that’s a useless piece of paper? You’d better to learn a trade.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve learned a trade. Then, I’ve been told:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“What a shame. You’ve studied so many years for that trade?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I moved ahead, and I left my job. I became penniless.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One day I was too young and inexperienced. The day after I was too old, with too much experience and too many titles.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I finally found a job. Well, not a permanent one. A temporary one, with no paid leave, no insurance, no pension, no bonuses, no severance, no rights. And I had to fight hard to keep that not-a-job. I decided not to have children, because of some sense of responsibility, and I grew up. Then I’ve been told, &lt;a href=&quot;http://www.dailymail.co.uk/news/article-1289005/Rise-bamboccioni-big-babies--Why-young-Italians-choosing-live-home.html&quot; target=&quot;_blank&quot;&gt;by someone who got his job in the 60s, when it was easy to get a job, despite of your education level&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“You are a fool, a dupe who didn’t want to grow up and raise a family”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the meantime, I was paying his very own pension, saying a final goodbye to mine. Tired and grown up, I decided to have a baby. I’ve been told that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Only an irresponsible person would have a child without a proper job and without a good economical background”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Given that I could not kill my son, I decided to emigrate. I went somewhere else. I found a safe place, and a good job. I was feeling good. I was feeling home. But one day, when the Italian system went bankrupt, I’ve then been told:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Why the hell did you flee? Why didn’t you help your Country?”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At that point, There was only one very reply:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Fuck off!”.&lt;/p&gt;
&lt;/blockquote&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/italy/history-of-a-generation&quot;&gt;History of a Generation&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on September 12, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[How they tried to fool tryerlang.org]]></title>
  <link>http://iyengake.github.io/erlang/how-they-tried-to-fool-tryerlang-org</link>
  <id>http://iyengake.github.io/erlang/how-they-tried-to-fool-tryerlang-org</id>
  <updated>2010-10-14T00:00:00-00:00</updated>
  <published>2010-10-14T00:00:00-04:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;h2&gt;Preface&lt;/h2&gt;

&lt;p&gt;&lt;a title=&quot;tryerlang.org&quot; href=&quot;http://tryerlang.org&quot; target=&quot;_blank&quot;&gt;tryerlang.org&lt;/a&gt; is an &lt;em&gt;interactive Erlang Shell&lt;/em&gt; which allows users to try the power of Erlang directly in a browser, without requiring them to install an Erlang runtime system on their machine. Even if intended for Erlang newbies, tryerlang.org has been subjected to a countless number of attacks conducted by Erlang experts who wanted to circumvent its sandboxing mechanism and to bring down the Erlang node running the application. I must admit that going through the tryerlang.org’s logs is being an highly interesting and constructive experience.&lt;/p&gt;

&lt;p&gt;In this blog post I will present one of the most elaborated attacks performed on tryerlang.org. The attack, which exploits the Erlang &lt;em&gt;External Term Representation&lt;/em&gt;, has been performed by a former &lt;a href=&quot;http://www.erlang-solutions.com&quot; target=&quot;_blank&quot;&gt;Erlang Solutions&lt;/a&gt;’ employee who had access to the tryerlang.org source code. To understand how the attack works, we need to introduce the Erlang &lt;em&gt;External Term Representation&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;External Term Representation&lt;/h2&gt;

&lt;p&gt;In Distributed Erlang, terms can be transferred from an Erlang node to another one using the so-called &lt;em&gt;binary&lt;/em&gt; format. Generic terms are encoded in binary from the sender using the built-in function &lt;code&gt;term_to_binary/1&lt;/code&gt; and restored from the receiver using the complementary function &lt;code&gt;binary_to_term/2&lt;/code&gt;. A binary message looks like this:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;&amp;lt;131,100,0,6,112,105,103,101,111,110&amp;gt;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Which, as you can see, represents the binary encoding of the atom &lt;code&gt;pigeon&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;
1&amp;gt; term_to_binary(pigeon).
&amp;lt;&amp;lt;131,100,0,6,112,105,103,101,111,110&amp;gt;&amp;gt;
2&amp;gt; binary_to_term(&amp;lt;&amp;lt;131,100,0,6,112,105,103,101,111,110&amp;gt;&amp;gt;).
pigeon
&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;External Term Representation&lt;/em&gt; of Erlang terms is extensively documented in &lt;a title=&quot;Erlang External Term Representation&quot; href=&quot;http://www.erlang.org/doc/apps/erts/erl_ext_dist.html&quot; target=&quot;_blank&quot;&gt;the official Erlang Documentation&lt;/a&gt;. Let’s see how the attacker used this concept in his own interest.&lt;/p&gt;

&lt;h2&gt;Halting the Erlang Node&lt;/h2&gt;

&lt;p&gt;To stop the Erlang node running tryerlang.org, the attacker tries at first the following command:&lt;/p&gt;

&lt;pre&gt;
&amp;gt; erlang:halt().
&lt;/pre&gt;

&lt;p&gt;This function, documented &lt;a title=&quot;Erlang Halt&quot; href=&quot;http://www.erlang.org/doc/man/erlang.html#halt-0&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, is supposed to &lt;em&gt;halt&lt;/em&gt; an Erlang runtime system, indicating a normal exit to the calling environment. The function has been disabled in tryerlang.org for security reasons, so the only result the user get is the following annoying message:&lt;/p&gt;

&lt;pre&gt;
&quot;This functionality has been disabled for security reasons in tryerlang.org.&quot;.
&lt;/pre&gt;

&lt;p&gt;So, the Erlang node is still up and attacker prepares himself a good cup of Swedish coffee. After a couple of minutes playing with the tryerlang.org shell, the attcker notices that tryerlang.org allows you to define custom &lt;a title=&quot;Erlang Funs&quot; href=&quot;http://www.erlang.org/doc/programming_examples/funs.html&quot; target=&quot;_blank&quot;&gt;funs&lt;/a&gt;. Then, the intuition. A &lt;em&gt;fun&lt;/em&gt;, as any other Erlang term, &lt;a title=&quot;export_ext&quot; href=&quot;http://www.erlang.org/doc/apps/erts/erl_ext_dist.html#id83276&quot; target=&quot;_blank&quot;&gt;can be encoded using the External Terms Representation&lt;/a&gt;. The encoded fun could then be executed. This could hopefully fool the sandboxing mechanism protecting the tryerlang.org and could open a world of possibilities to the attacker.&lt;/p&gt;

&lt;p&gt;According to the documentation, the external representation of the fun (in the &lt;code&gt;fun M:F/A&lt;/code&gt; format) is the following:&lt;/p&gt;

&lt;pre&gt;
113 | Module | Function | Arity
&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;Module&lt;/code&gt; and &lt;code&gt;Function&lt;/code&gt; are atoms and &lt;code&gt;Arity&lt;/code&gt; is an integer.&lt;/p&gt;

&lt;p&gt;Atoms themselves can be encoded using the &lt;a title=&quot;atom ext&quot; href=&quot;http://www.erlang.org/doc/apps/erts/erl_ext_dist.html#ATOM_EXT&quot; target=&quot;_blank&quot;&gt;ATOM_EXT&lt;/a&gt; format:&lt;/p&gt;

&lt;pre&gt;
100 | Len | AtomName
&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;Len&lt;/code&gt; is the length of &lt;code&gt;AtomName&lt;/code&gt;, expressed using two bytes.&lt;/p&gt;

&lt;p&gt;For the atom &lt;code&gt;erlang&lt;/code&gt;, which is composed of 6 characters (the letters &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;) we obtain:&lt;/p&gt;

&lt;pre&gt;
100 | 0, 6 | 101, 114, 108, 97, 110, 103
&lt;/pre&gt;

&lt;p&gt;Where the integers in the third section are the ASCII codes for each of the letters composing the word “erlang”.&lt;/p&gt;

&lt;p&gt;Applying the same reasoning to the atom &lt;code&gt;halt&lt;/code&gt;, we obtain:&lt;/p&gt;

&lt;pre&gt;
100 | 0, 4 | 104, 97, 108, 116
&lt;/pre&gt;

&lt;p&gt;Finally, the arity (an integer) can be encoded using the &lt;a title=&quot;small integer ext&quot; href=&quot;http://www.erlang.org/doc/apps/erts/erl_ext_dist.html#id80902&quot; target=&quot;_blank&quot;&gt;SMALL_INTEGER_EXT&lt;/a&gt; format:&lt;/p&gt;

&lt;pre&gt;
97 | Int
&lt;/pre&gt;

&lt;p&gt;So, in our case (arity = 0) we obtain:&lt;/p&gt;

&lt;pre&gt;
97 | 0
&lt;/pre&gt;

&lt;p&gt;Putting all the pieces together and considering that, in the External Term Representation, the byte &lt;code&gt;131&lt;/code&gt; needs to be prepended to the final term, we can encode the &lt;code&gt;erlang:halt/&lt;/code&gt;0 function into binary, obtaining:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;&amp;lt;131,113,100,0,6,101,114,108,97,110,103,100,0,4,104,97,108,116,97,0&amp;gt;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Let’s verify that we didn’t do any mistake:&lt;/p&gt;

&lt;pre&gt;
&amp;gt; binary_to_term(&amp;lt;&amp;lt;131,113,100,0,6,101,114,108,97,110,103,100,0,4,104,97,108,116,97,0&amp;gt;&amp;gt;).
&amp;gt; #Fun&amp;lt;erlang.halt.0&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Since tryerlang.org doesn’t support copy-and-paste from the clipboard, we need to insert the sequence above by hand.&lt;/p&gt;

&lt;p&gt;We can bind the binary to a new variable:&lt;/p&gt;
&lt;pre&gt;
&amp;gt; B = &amp;lt;&amp;lt;131,113,100,0,6,101,114,108,97,110,103,100,0,4,104,97,108,116,97,0&amp;gt;&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;We now need to convert the binary into an Erlang term. Originally, tryerlang.org was allowing &lt;a title=&quot;Erlang Safe Binary To Term&quot; href=&quot;http://www.erlang.org/doc/man/erlang.html#binary_to_term-2&quot; target=&quot;_blank&quot;&gt;the binary_to_term function in safe mode&lt;/a&gt;. This function has been now completely disabled after this attack. If you want to try what follows you will need to do it in your own Erlang shell.&lt;/p&gt;

&lt;pre&gt;
&amp;gt; F = binary_to_term(B, [safe]).
&lt;/pre&gt;

&lt;p&gt;Let’s now try to launch the fun as:&lt;/p&gt;

&lt;pre&gt;
&amp;gt;F().
&lt;/pre&gt;

&lt;p&gt;Well, that didn’t work as expected. tryerlang.org actually realized that the &lt;code&gt;erlang:halt/0&lt;/code&gt; function was going to be called and the sandboxing mechanism managed to block the execution of the command. We need to do something slightly different. For example, we might pass the newly defined fun as an argument (after all, Erlang is a functional language) to a function who would take care of executing it. As an example, we could use the library function &lt;code&gt;lists:map/2&lt;/code&gt;. There’s only a little tiny problem with that. The &lt;code&gt;list:map/2&lt;/code&gt; function, in fact, requires that the fun passed as an argument receives &lt;em&gt;exactly one argument&lt;/em&gt;. This is not the case of the &lt;code&gt;erlang:halt/0&lt;/code&gt; function, which has arity equal to zero. Fortunately &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#halt-1&quot; target=&quot;_blank&quot;&gt;an alternative version of &lt;code&gt;erlang:halt/0&lt;/code&gt; exists, taking exactly one argument&lt;/a&gt;. The external representation for the new function differs from the previous one by only the very last byte. Let’s &lt;em&gt;forget&lt;/em&gt; the old value of the variable &lt;code&gt;B&lt;/code&gt; and let’s bind it to the new binary:&lt;/p&gt;

&lt;pre&gt;
&amp;gt; f(B).
&amp;gt; B = &amp;lt;&amp;lt;131,113,100,0,6,101,114,108,97,110,103,100,0,4,104,97,108,116,97,1&amp;gt;&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;We can now pass the new fun as an argument to the &lt;code&gt;lists:map&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;
&amp;gt; f(F).
&amp;gt; F = binary_to_term(B, [safe]).
&amp;gt;lists:map(F, [0]).
&lt;/pre&gt;

&lt;p&gt;And the node dies. Well, in reality the node is almost immediately brought back by &lt;a title=&quot;Erlang Heart&quot; href=&quot;http://www.erlang.org/doc/man/heart.html&quot; target=&quot;_blank&quot;&gt;heart&lt;/a&gt; which is listening for heartbeats from the Erlang node itself but, hey, I have to pay a beer to this guy! :)&lt;/p&gt;

&lt;p&gt;I wanted to share this experience with all of you. I consider it highly constructive, since it leads to reflect on several aspects of Erlang. Comments and feedback are more than welcome.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/erlang/how-they-tried-to-fool-tryerlang-org&quot;&gt;How they tried to fool tryerlang.org&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on October 14, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Emacs Tips and Tricks]]></title>
  <link>http://iyengake.github.io/emacs/emacs-tips-and-tricks</link>
  <id>http://iyengake.github.io/emacs/emacs-tips-and-tricks</id>
  <updated>2009-02-19T00:00:00-00:00</updated>
  <published>2009-02-19T00:00:00-05:00</published>
  
  <author>
    <name>Keerthi Iyengar</name>
    <uri>http://iyengake.github.io</uri>
    <email>keerthi.r.iyengar@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;In this blog post I collect some miscellaneous Emacs tips and tricks.&lt;/p&gt;

&lt;h2&gt;Playing with Macros&lt;/h2&gt;

&lt;p&gt;In Emacs, you can &lt;em&gt;record&lt;/em&gt; a set of actions that you can then apply to a selected region. As an example, let’s transform the following three lines:&lt;/p&gt;

&lt;pre&gt;
First Line
Second Line
Third Line
&lt;/pre&gt;

&lt;p&gt;into a list of items, using a macro:&lt;/p&gt;

&lt;pre&gt;
- First Line
- Second Line
- Third Line
&lt;/pre&gt;

&lt;p&gt;Put your cursor on the &lt;code&gt;First line&lt;/code&gt;, then start recording a new keyboard macro by typing:&lt;/p&gt;

&lt;pre&gt;C-x (&lt;/pre&gt;

&lt;p&gt;Jump to the beginning of the line (&lt;code&gt;C-a&lt;/code&gt;), insert a dash followed by a space (&lt;code&gt;- &lt;/code&gt;) and then move your cursor down one line, so it resides on the &lt;code&gt;Second Line&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Stop recording the macro:&lt;/p&gt;

&lt;pre&gt;C-x )&lt;/pre&gt;

&lt;p&gt;Now select the lines &lt;code&gt;Second Line&lt;/code&gt; and &lt;code&gt;Third Line&lt;/code&gt; and apply the newly recorded macro to the selected region by pressing:&lt;/p&gt;

&lt;pre&gt;C-x C-k r&lt;/pre&gt;

&lt;p&gt;You should now see the desired output.&lt;/p&gt;

&lt;h2&gt;Swapping Words&lt;/h2&gt;

&lt;p&gt;Say that you want to reverse the order of the parameter for the following function:&lt;/p&gt;

&lt;pre&gt;
foo(Second, First) -&amp;gt;
    ok.
&lt;/pre&gt;

&lt;p&gt;Position the cursor between the words &lt;code&gt;Second&lt;/code&gt; and &lt;code&gt;First&lt;/code&gt;. Then, press:&lt;/p&gt;

&lt;pre&gt;M-t&lt;/pre&gt;

&lt;p&gt;You should obtain the following:&lt;/p&gt;

&lt;pre&gt;
foo(First, Second) -&amp;gt;
    ok.
&lt;/pre&gt;

&lt;h2&gt;Swapping Lines&lt;/h2&gt;

&lt;p&gt;Given the following two lines:&lt;/p&gt;

&lt;pre&gt;
Second Line
First Line
&lt;/pre&gt;

&lt;p&gt;Put the cursor at the beginning of &lt;code&gt;First Line&lt;/code&gt; and press:&lt;/p&gt;

&lt;pre&gt;C-x C-t&lt;/pre&gt;

&lt;p&gt;You should get:&lt;/p&gt;

&lt;pre&gt;
First Line
Second Line
&lt;/pre&gt;

&lt;h2&gt;Version Control&lt;/h2&gt;

&lt;p&gt;Emacs has support for the most common Version Control systems (e.g. &lt;em&gt;SVN&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;To check-in a single file directly from Emacs, simply follow the steps below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Press &lt;code&gt;C-x v v&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Write a meaningful &lt;em&gt;change comment&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Press &lt;code&gt;C-c C-c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To revert changes for the current buffer:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C-x v u&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To see the differences for a buffer before committing it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C-x v =&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Executing a Shell Command&lt;/h2&gt;

&lt;p&gt;If you want to execute a shell command within Emacs, you can simply type:&lt;/p&gt;

&lt;pre&gt;M-!&lt;/pre&gt;

&lt;p&gt;If you want to include the output into the current buffer, then:&lt;/p&gt;

&lt;pre&gt;C-u M-!&lt;/pre&gt;

&lt;h2&gt;Clipboard History&lt;/h2&gt;

&lt;p&gt;Emacs keeps a clipboard history, allowing you to paste old clipboard entries. To utilize this function:&lt;/p&gt;

&lt;p&gt;Press the following to paste:&lt;/p&gt;

&lt;pre&gt;C-y&lt;/pre&gt;

&lt;p&gt;And then browse the clipboard history by repeatedly typing:&lt;/p&gt;

&lt;pre&gt;M-y&lt;/pre&gt;

&lt;h2&gt;Create a Numbered List&lt;/h2&gt;

&lt;p&gt;Say that you have a list of items that you want to convert into a numbered list:&lt;/p&gt;

&lt;pre&gt;
first
second
third
&lt;/pre&gt;

&lt;pre&gt;
1. first
2. second
3. third
&lt;/pre&gt;

&lt;p&gt;There are many ways to achieve this. One is to use &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macro-Counter.html#Keyboard-Macro-Counter&quot; target=&quot;_blank&quot;&gt;the Emacs Keyboard Macro Counter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Position the cursor one line &lt;em&gt;above&lt;/em&gt; your list and start registering a new macro:&lt;/p&gt;

&lt;pre&gt;C-x (&lt;/pre&gt;

&lt;p&gt;Insert a new counter value:&lt;/p&gt;

&lt;pre&gt;C-x C-k C-i.&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;0&lt;/code&gt; will appear. Append a dot and a space:&lt;/p&gt;

&lt;pre&gt;. &lt;/pre&gt;

&lt;p&gt;Move the cursor to the next line and stop registering the macro:&lt;/p&gt;

&lt;pre&gt;C-x )&lt;/pre&gt;

&lt;p&gt;Select the list of items and apply the macro to the selected region:&lt;/p&gt;

&lt;pre&gt;C-x C-k r&lt;/pre&gt;

&lt;p&gt;Delete the &lt;code&gt;0&lt;/code&gt; that you added at the beginning of the list and enjoy your brand new numbered list.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://iyengake.github.io/emacs/emacs-tips-and-tricks&quot;&gt;Emacs Tips and Tricks&lt;/a&gt; was originally published by Keerthi Iyengar at &lt;a href=&quot;http://iyengake.github.io&quot;&gt;Keerthi Iyengar&lt;/a&gt; on February 19, 2009.&lt;/p&gt;</content>
</entry>

</feed>
